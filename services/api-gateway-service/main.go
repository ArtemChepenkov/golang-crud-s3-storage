package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/ArtemChepenkov/golang-crud-s3-storage/pkg/config"
	"github.com/ArtemChepenkov/golang-crud-s3-storage/services/api-gateway-service/gateway"
)

func main() {
	time.Sleep(time.Second * 10)
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
	cfg := config.LoadConfig("./pkg/config")

	// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–µ—Ä
	server := gateway.NewServer(cfg)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
	server.RegisterRoutes()

	// HTTP —Å–µ—Ä–≤–µ—Ä
	httpServer := &http.Server{
		Addr:    cfg.Service.HTTPListen,
		Handler: nil, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π DefaultServeMux
	}

	// –ö–∞–Ω–∞–ª –¥–ª—è graceful shutdown
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	go func() {
		log.Printf("üöÄ API Gateway running on %s", cfg.Service.HTTPListen)
		if err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("server error: %v", err)
		}
	}()

	// –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–æ–≤
	<-stop
	log.Println("Shutting down...")

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	if err := httpServer.Shutdown(ctx); err != nil {
		log.Fatalf("server forced to shutdown: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤
	close(server.WorkerChan)
	server.Wg.Wait()

	log.Println("‚úÖ Shutdown complete")
}
