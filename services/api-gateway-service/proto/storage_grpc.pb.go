// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: storage.proto

package api_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiGatewayService_UploadFile_FullMethodName   = "/api_gateway.ApiGatewayService/UploadFile"
	ApiGatewayService_DownloadFile_FullMethodName = "/api_gateway.ApiGatewayService/DownloadFile"
	ApiGatewayService_ListFiles_FullMethodName    = "/api_gateway.ApiGatewayService/ListFiles"
	ApiGatewayService_DeleteFile_FullMethodName   = "/api_gateway.ApiGatewayService/DeleteFile"
	ApiGatewayService_Health_FullMethodName       = "/api_gateway.ApiGatewayService/Health"
)

// ApiGatewayServiceClient is the client API for ApiGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, FileUploadResponse], error)
	DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type apiGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayServiceClient(cc grpc.ClientConnInterface) ApiGatewayServiceClient {
	return &apiGatewayServiceClient{cc}
}

func (c *apiGatewayServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, FileUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ApiGatewayService_ServiceDesc.Streams[0], ApiGatewayService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, FileUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiGatewayService_UploadFileClient = grpc.ClientStreamingClient[FileChunk, FileUploadResponse]

func (c *apiGatewayServiceClient) DownloadFile(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ApiGatewayService_ServiceDesc.Streams[1], ApiGatewayService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileDownloadRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiGatewayService_DownloadFileClient = grpc.ServerStreamingClient[FileChunk]

func (c *apiGatewayServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, ApiGatewayService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, ApiGatewayService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, ApiGatewayService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGatewayServiceServer is the server API for ApiGatewayService service.
// All implementations must embed UnimplementedApiGatewayServiceServer
// for forward compatibility.
type ApiGatewayServiceServer interface {
	UploadFile(grpc.ClientStreamingServer[FileChunk, FileUploadResponse]) error
	DownloadFile(*FileDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedApiGatewayServiceServer()
}

// UnimplementedApiGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiGatewayServiceServer struct{}

func (UnimplementedApiGatewayServiceServer) UploadFile(grpc.ClientStreamingServer[FileChunk, FileUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedApiGatewayServiceServer) DownloadFile(*FileDownloadRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedApiGatewayServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedApiGatewayServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedApiGatewayServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedApiGatewayServiceServer) mustEmbedUnimplementedApiGatewayServiceServer() {}
func (UnimplementedApiGatewayServiceServer) testEmbeddedByValue()                           {}

// UnsafeApiGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServiceServer will
// result in compilation errors.
type UnsafeApiGatewayServiceServer interface {
	mustEmbedUnimplementedApiGatewayServiceServer()
}

func RegisterApiGatewayServiceServer(s grpc.ServiceRegistrar, srv ApiGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiGatewayService_ServiceDesc, srv)
}

func _ApiGatewayService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiGatewayServiceServer).UploadFile(&grpc.GenericServerStream[FileChunk, FileUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiGatewayService_UploadFileServer = grpc.ClientStreamingServer[FileChunk, FileUploadResponse]

func _ApiGatewayService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiGatewayServiceServer).DownloadFile(m, &grpc.GenericServerStream[FileDownloadRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiGatewayService_DownloadFileServer = grpc.ServerStreamingServer[FileChunk]

func _ApiGatewayService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGatewayService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGatewayService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGatewayService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiGatewayService_ServiceDesc is the grpc.ServiceDesc for ApiGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_gateway.ApiGatewayService",
	HandlerType: (*ApiGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _ApiGatewayService_ListFiles_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _ApiGatewayService_DeleteFile_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ApiGatewayService_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _ApiGatewayService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _ApiGatewayService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage.proto",
}
